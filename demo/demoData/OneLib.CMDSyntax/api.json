[
    {
        "name":"创建模块",
        "apis":[
            {
                "name":"define",
                "type":"Function",
                "returned":"undefined",
                "desc":"该方法在全局空间可以直接访问,通过define方法来创建互不干扰的module,是OneLib的所有通用组件所遵循的一个规范。<br/>其目的主要是为了:<ul><li>1、尽量少的占用全局空间(define的模块不占用任何global空间)</li><li>2、提供统一的定义模块的功能,实现私有属性的封装、公开属性的暴露、以及显示的组件依赖关系声明</li></ul>",
                "params":[
                    {"name":"moduleName","type":"String","desc":"要定义的模块名称:<ul><li>1、模块名不能重复，默认情况下重复定义一个模块会抛出异常</li><li>2、格式注意规范，首字母大写，尽量采用.号来分割逻辑关系。如:UI.Block</li></ul>"},
                    {"name":"dependency","type":"Array<String>","desc":"依赖的其他模块名列表,如:['UI.Block','JQuery']"},
                    {"name":"factory","type":"Function(require,exports,module)","desc":"创建模块的工厂方法。该参数是最重要的一个构造模块的参数，后面会详细说明其写法"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_1.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            },
            {
                "name":"factory.require",
                "type":"Function",
                "returned":"Module.exports",
                "desc":"在factory方法中，需要用到依赖的外部模块时，使用require参数来获取外部模块.<ul><li>1、该方法同步的返回指定模块的public部分，也就是在定义该模块的文件中exports部分的内容</li><li>2、require关键字与node.js的后台语法一致，这样可以方便的将原本使用在前台代码移植到后端，反之亦然</li></ul>",
                "params":[
                    {"name":"moduleName","type":"String","desc":"模块名，可以是真实名称，也可以是简短的'别名'。后面会介绍如何给模块起别名"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_require_1.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            },
            {
                "name":"factory.require.async",
                "type":"Function",
                "returned":"Module.exports",
                "desc":"需要异步加载依赖的时候，使用require.async方法来获取外部模块.<ul><li>1、该方法会从一个模块信息表(通过setSrcMap指定)中查找模块url,并返回指定模块的public部分，也就是在定义该模块的文件中exports部分的内容</li><li>2、框架内部会自动分析异步加载的模块是否有其他依赖模块，如果有，会自动先加载那些模块</li></ul>",
                "params":[
                    {"name":"moduleNames","type":"String/Array<String>","desc":"模块名，可以是真实名称，也可以是简短的'别名'。\r\n注意，如果一次加载多个异步依赖，可以用模块名数组来作为参数"},
                    {"name":"callback","type":"Function(module1,module2)","desc":"模块加载成功的回调。\r\n注意：回调参数返回加载的模块，顺序和调用时的参数顺序一致"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_require_async.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            },
            {
                "name":"factory.exports",
                "type":"Object",
                "returned":"",
                "desc":"对外部导出public方法、属性的容器对象:<ul><li>注意：不要直接给exports赋值，这样无法导出.如:exports={ a:1 } 应该写为: exports.a =1</li></ul>",
                "params":[
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_exports.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            },
            {
                "name":"factory.module",
                "type":"Object",
                "returned":"",
                "desc":"提供对本次定义的模块的信息的访问,主要有以下属性:<ul><li>id：模块id</li><li>name：模块名称</li><li>dependencies：依赖的模块</li><li>exports：对外公开的API</li></ul>",
                "params":[
                    {"name":"id","type":"String","desc":"模块唯一标识,目前版本是和name一样的 (计划在后面的版本中提供不指定模块名，以文件完整路径作为id的功能)"},
                    {"name":"name","type":"String","desc":"模块名,就是define的时候第一个参数指定的模块名"},
                    {"name":"dependencies","type":"Array<String>","desc":"依赖的外部模块列表，就是define的时候第二个参数指定的模块列表"},
                    {"name":"exports","type":"Object","desc":"要导出的公开方法、属性的容器。要注意的是，可以使用module.exports={}来直接设置exports对象"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_module_param.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    },
                    {
                        "name":"点击下面按钮运行示例",
                        "desc":"",
                        "type":"real",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_module_param.html",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                            "/demo/demoData/OneLib.CMDSyntax/example.define_module_param.js"
                        ]
                    }
                ]
            },
            {
                "name":"factory的return对象",
                "type":"Object",
                "returned":"",
                "desc":"默认情况下，工厂方法是不需要return任何值的。如果有return非空对象，则框架会把return的对象作为exports来处理.<br/><span class='warn-notice'>支持该语法主要为了与一些其他库兼容，方便互相迁移，如seajs</span>",
                "params":[
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_return.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name":"配置",
        "apis":[
            {
                "name":"setSrcMap",
                "type":"Function",
                "returned":"undefined",
                "desc":"设置模块元数据信息。\r\n如果你的场景中需要使用require.async，那么请提前调用该方法。\r\n目前我们团队使用FIS来生成srcMap",
                "params":[
                    {"name":"srcMap","type":"Object","desc":"一个结构，用于表示模块的信息，见下面样例"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"下面的例子演示了如何设置srcMap，以及SrcMap的结构",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.srcMap.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            },
            {
                "name":"logOn/logOff",
                "type":"Function",
                "returned":"undefined",
                "desc":"开启/关闭 日志功能，主要用于调试模块加载过程出现的问题",
                "params":[
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"下面的例子演示了在定义2个模块之前打开日志，然后关闭了日志。可以使用console查看日志输出.<br/><span class='warn-notice'>在本例中,由于这2个模块名在之前的demo中已经定义过了,所以应可以看到控制台的对应输出</span>",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.logOn.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                            "/demo/demoData/OneLib.CMDSyntax/example.logOn.js"
                        ]
                    }
                ]
            },
            {
                "name":"configDealConflicts",
                "type":"Function",
                "returned":"this",
                "desc":"配置当模块名定义出现冲突的时候，框架如何反应.",
                "params":[
                    {"name":"mode","type":"Object","desc":"格式为:{moduleNameConflict:'xxxx'}:<ul><li>'throw':默认模式，当模块名重复定义的时候，抛出异常</li><li>'return':冲突发生的时候,不抛出异常,直接返回</li><li>'overwrite':冲突发生的时候,仍然允许模块定义，并用新定义的模块覆盖旧的(旧模块的所有实现都将被删除)</li></ul>"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"在本demo中，由于一些模块需要重复加载到本地，所以设置为了return模式：",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.configDealConflicts.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name":"包装已有模块",
        "apis":[
            {
                "name":"wrapToModule",
                "type":"Function",
                "returned":"undefined",
                "desc":"把一个已经存在的第三方组件包装为CMD模块",
                "params":[
                    {"name":"moduleName","type":"String","desc":"要包装成的目标模块名"},
                    {"name":"moduleObj","type":"Object","desc":"被包装的第三方模块的输出对象。如jQuery的$"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"在本demo中,也使用了jQuery,使用下面的方法把jQuery包装到框架中去",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.wrapModule.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    },
                    {
                        "name":"",
                        "desc":"有了上面的包装，在模块里就可以这么引入jQuery了",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.define_require_1.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    }
                ]
            }
        ]
    },
    {
        "name":"其他功能",
        "apis":[
            {
                "name":"addAlias",
                "type":"Function",
                "returned":"this",
                "desc":"给一个模块起别名。有了别名之后，就可以通过 require(<别名>) 来访问模块了<br/><span class='warn-notice'>别名的一个很有效的使用场景就是你既想通过模块名来准确的表达这个模块的含义，又想在引用的时候使用简化的标记来引入，这时候就可以起一个简单的别名</span>",
                "params":[
                    {"name":"aliasObj","type":"Dic<alia,originName>","desc":"一个对象字典，key为别名，value为原来的模块名"}
                ],
                "demoCodeRefs":[
                    {
                        "name":"",
                        "desc":"",
                        "type":"example",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.addAlias.js",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                        ]
                    },
                    {
                        "name":"点击下面按钮运行示例",
                        "desc":"",
                        "type":"real",
                        "codeUrl":"/demo/demoData/OneLib.CMDSyntax/example.addAlias.html",
                        "cssUrls":[
                        ],
                        "javascriptUrls":[
                            "/demo/demoData/OneLib.CMDSyntax/example.addAlias.js"
                        ]
                    }
                ]
            }
        ]
    }
]